#include <stdio.h>
#include <string.h>
#include <time.h>
#include <math.h>
#include <locale.h>
//Autor : Daniel Alves 3° Semestre 27/11/2022 APA
//Qtd de linhas do codigo a ser lido + 1, usado no char de todas as funções, fica mais facil mudar a partir daqui

#define endereco1 "C:\\Users\\Public\\BUSCA\\CODIGO1.txt" //Endereço do cod 1
#define endereco2 "C:\\Users\\Public\\BUSCA\\CODIGO2.txt" //Endereço do cod 2
#define linhas 160

void cod(int i){
	double tempo = 0;               //tempo inicia zerado
	clock_t inicio = clock();       //inicia a contagem do tempo
	
	char str[linhas]; 
    FILE *arq;
	int qt_if=0,qt_else=0,qt_for=0,qt_do=0,qt_while=0,qt_eq=0,qt_entr=0;
	int soma,form1,form2,simp,compost;
	
	if (i == 0){
		arq = fopen(endereco1,"r");
	}else{
		arq = fopen(endereco2,"r");
	}
	
	while(fgets(str,sizeof(str),arq) != NULL){                                 // Percorre o texto
		if(strstr(str,"if(") != NULL || strstr(str,"if (") != NULL){           //base para selecionar a palavra a ser procurada
			qt_if++;                                                           //quantidade das palavras
		}
		if(strstr(str,"}else") != NULL || strstr(str,"} else") != NULL){       //base para selecionar a palavra a ser procurada
			qt_else++;                                                         //quantidade das palavras
		}
		if(strstr(str,"for(") != NULL || strstr(str,"for (") != NULL){         //base para selecionar a palavra a ser procurada
			qt_for++;                                                          //quantidade das palavras
		}
		if(strstr(str,"}while(") != NULL || strstr(str,"}while (") != NULL){   //base para selecionar a palavra a ser procurada
			qt_do++;                                                           //quantidade das palavras
		}
		if(strstr(str,"while(") != NULL || strstr(str,"while (") != NULL){     //base para selecionar a palavra a ser procurada
			qt_while++;                                                        //quantidade das palavras
		}
		if(strstr(str,"+") != NULL || strstr(str,"-") != NULL){                //base para selecionar a palavra a ser procurada
			qt_eq++;                                                           //quantidade das palavras
		}
		if(strstr(str,"scanf") != NULL || strstr(str,"=") != NULL){            //base para selecionar a palavra a ser procurada
			qt_entr++;                                                         //quantidade das palavras
		}
		
	}
	
	fclose(arq);     //Fecha o arquivo
	if(qt_while-qt_do > 0){
	 qt_while-=qt_do; //Diferença
	}  
	if(qt_eq-qt_entr > 0){
	 qt_eq-=qt_entr; //Diferença
	}  
	
	soma = qt_if+qt_else+(qt_for * 2)+(qt_do* 2)+(qt_while* 2)+qt_eq+qt_entr; //Soma geral
	form1 = 2 * pow(soma,2) + 5 * soma; //Formula 1
	form2 = 500 * soma + 4000; //Formula 2
	
	simp = qt_eq+qt_entr; //Soma Simples
	compost = qt_if+qt_else+(qt_for * 2)+(qt_do* 2)+(qt_while* 2); //Soma Simples
	if (i == 0){
	printf("\n\t==>>Primeiro Programa<<==\n");
	}else{
		printf("\n\t==>>Segundo Programa<<==\n");
	}
    printf("\nA funcao If foi encontrada %d veze(s) no codigo.\n",qt_if);       //printa o resultado
    printf("\nA funcao Else foi encontrada %d veze(s) no codigo.\n",qt_else);   //printa o resultado
	printf("\nA funcao For foi encontrada %d veze(s) no codigo.\n",qt_for);     //printa o resultado
	printf("\nA funcao Do/While foi encontrada %d veze(s) no codigo.\n",qt_do); //printa o resultado
	printf("\nA funcao While foi encontrada %d veze(s) no codigo.\n",qt_while); //printa o resultado
	printf("\nEntrada de dados encontradas %d vezes no codigo.\n",qt_entr);     //printa o resultado
	printf("\nEquacoes encontradas %d vezes no codigo.\n",qt_eq);               //printa o resultado
	printf("\nTotal Simples : %i  \nTotal Compostas : %i\n",simp,compost);      //printa o resultado
	printf("\nAlgoritmo 1 : %i operacoes\nAlgoritmo 2 : %i operacoes\n",form1,form2);
	
	clock_t final = clock();                           //finaliza o tempo
    tempo += (double)(final - inicio)/CLOCKS_PER_SEC; //da o resultado do tempo percorrido
    printf("\nTempo de Compilacao: %f\n", tempo);     //printa o resultado do tempo
}

int main(){
	
    int i=0;
    cod(i);
    i++;
    cod(i);
    
	return 0;
}
