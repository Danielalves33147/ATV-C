#include <stdio.h>
#include <string.h>
#include <time.h>
#include <math.h>
//Autor : Daniel Alves 3° Semestre 27/11/2022 APA
//Qtd de linhas do codigo a ser lido + 1, usado no char de todas as funções, fica mais facil mudar a partir daqui
#define linhas 160
#define endereco1 "C:\\Users\\Public\\BUSCA\\CODIGO1.txt" //Endereço do cod 1
#define endereco2 "C:\\Users\\Public\\BUSCA\\CODIGO2.txt" //Endereço do cod 2
/*Os endereços vão variar, basta modificar aqui acima*/

void cod(int i){
	double tempo = 0;               //tempo inicia zerado
	clock_t inicio = clock();       //inicia a contagem do tempo
	char str[linhas];
    FILE *arq;                      //Arquivo
	int qt_if=0,qt_else=0,qt_for=0,qt_do=0,qt_while=0,qt_eq=0,qt_entr=0,qt_rec=0; //Variaveis
	int soma,form1,form2,simp,compost;                                            //Variaveis
	
	switch(i){
		case 0:
		arq = fopen(endereco1,"r"); //Abre o arquivo 1
		break;
		default:
		arq = fopen(endereco2,"r"); //Abre o arquivo 2
		break; }
		/* Alguns if's tem outro if dentro com uma redução na contagem,
		isso por que existem alguns casos que precisam disso, como o if, 
		else if e else, eles vão contar algumas vezes a mais por culpa 
		do else if, mas esse decremento sana esse problema não so no if
		 mas nos outros casos tambem */
		 
	while(fgets(str,sizeof(str),arq)){                             //Percorre o texto
		if(strstr(str,"if(") || strstr(str,"if (")){               //base para selecionar a palavra a ser procurada
			qt_if++;                                               //quantidade das palavras
			if(strstr(str,"else if(") || strstr(str,"else if (") ){//base para selecionar a palavra a ser procurada
			qt_if--;                                               //quantidade das palavras reduzidas por conta da repetição desnecessaria
			}
		}
		if(strstr(str,"else") || strstr(str," else")){        //base para selecionar a palavra a ser procurada
			qt_else++;                                        //quantidade das palavras
		}
		if(strstr(str,"for(")  || strstr(str,"for (")){       //base para selecionar a palavra a ser procurada
			qt_for++;                                         //quantidade das palavras
		}
		if(strstr(str,"}while(") || strstr(str,"}while (")){  //base para selecionar a palavra a ser procurada
			qt_do++;                                          //quantidade das palavras
		}
		if(strstr(str,"while(") || strstr(str,"while (")){    //base para selecionar a palavra a ser procurada
			qt_while++;                                       //quantidade das palavras
			if(strstr(str,"}while(") || strstr(str,"}while(")){
			}
		}
		if(strstr(str,"+") || strstr(str,"-")){               //base para selecionar a palavra a ser procurada
			qt_eq++;                                          //quantidade das palavras
		}
		if(strstr(str,"/") || strstr(str,"*")){               //base para selecionar a palavra a ser procurada
			qt_eq++;                                          //quantidade das palavras
			if(strstr(str,"//") || strstr(str,"/*")){         //base para selecionar a palavra a ser procurada
			qt_eq--;                                          //quantidade das palavras reduzidas por conta da repetição desnecessaria
			}
		}
		if(strstr(str,"scanf") || strstr(str,"=")){           //base para selecionar a palavra a ser procurada
			qt_entr++;                                        //quantidade das palavras
			if(strstr(str,"!=") || strstr(str,"==")){ 
				qt_entr--;                                    //quantidade das palavras reduzidas por conta da repetição desnecessaria
			}
		}
		if(strstr(str,"//rec")){                //a contagem da recursividade vai ser feita "manualmente", basta colocar um //rec toda vez que ver uma e rodar o codigo
			qt_rec++;                           //quantidade das palavras
		}
		
	}
	fclose(arq);     //Fecha o arquivo
	
	soma = qt_if+qt_else+(qt_for * 2)+(qt_do* 2)+(qt_while* 2)+qt_eq+qt_entr+qt_rec; //Soma geral
	form1 = 2 * pow(soma,2) + 5 * soma;              //Formula 1
	form2 = 500 * soma + 4000;                       //Formula 2
	simp = qt_if+qt_else+qt_eq+qt_entr+qt_rec;       //Soma Simples
	compost = /*qt_if+qt_else+*/(qt_for * 2)+(qt_do* 2)+(qt_while* 2); //Soma Composta
	
		switch(i){
		case 0:
		printf("\n\t==>>Primeiro Programa<<==\n");
		break;
		default:
		printf("\n\t==>>Segundo Programa<<==\n");
		break; }
		
	printf("\nQuantidade de passos: %i\n",soma);                                //printa o resultado	
    printf("\nA funcao If foi encontrada %d veze(s) no codigo.\n",qt_if);       //printa o resultado
    printf("\nA funcao Else foi encontrada %d veze(s) no codigo.\n",qt_else);   //printa o resultado
	printf("\nA funcao For foi encontrada %d veze(s) no codigo.\n",qt_for);     //printa o resultado
	printf("\nA funcao Do/While foi encontrada %d veze(s) no codigo.\n",qt_do); //printa o resultado
	printf("\nA funcao While foi encontrada %d veze(s) no codigo.\n",qt_while); //printa o resultado
	printf("\nEntrada de dados encontradas %d vezes no codigo.\n",qt_entr);     //printa o resultado
	printf("\nEquacoes encontradas %d vezes no codigo.\n",qt_eq);               //printa o resultado
	printf("\nTotal Simples : %i  \nTotal Compostas : %i\n",simp,compost);      //printa o resultado
	printf("\nAlgoritmo 1 : %i operacoes\nAlgoritmo 2 : %i operacoes\n",form1,form2);
	
	clock_t final = clock();                          //finaliza o tempo
    tempo += (double)(final - inicio)/CLOCKS_PER_SEC; //da o resultado do tempo percorrido
    printf("\nTempo de Compilacao: %f\n", tempo);     //printa o resultado do tempo
}

int main(){
    cod(0);
    cod(1);
	return 0;
}
